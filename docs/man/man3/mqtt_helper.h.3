.TH "src/mqtt_helper.h" 3 "esp32c3_lib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/mqtt_helper.h
.SH SYNOPSIS
.br
.PP
\fC#include <WiFi\&.h>\fP
.br
\fC#include <PubSubClient\&.h>\fP
.br
\fC#include <settings\&.h>\fP
.br
\fC#include 'log_helper\&.h'\fP
.br

.SS "関数"

.in +1c
.ti -1c
.RI "void \fBconnectMQTT\fP ()"
.br
.RI "MQTTブローカーへの接続を試行します。 "
.ti -1c
.RI "void \fBpublishMQTT\fP (const String &topic, const String &payload)"
.br
.RI "指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。 "
.ti -1c
.RI "void \fBhandleMQTT\fP ()"
.br
.RI "MQTTクライアントのループ処理を実行します。 "
.ti -1c
.RI "void \fBhandleReceivedMessage\fP (const char *topic, const char *payload)"
.br
.RI "受信したMQTTメッセージを処理します。 "
.ti -1c
.RI "void \fBsendDeviceStatus\fP ()"
.br
.RI "デバイスのステータス情報をMQTTでパブリッシュします。 "
.in -1c
.SS "変数"

.in +1c
.ti -1c
.RI "WiFiClient \fBespClient\fP"
.br
.ti -1c
.RI "PubSubClient \fBmqttClient\fP"
.br
.in -1c
.SH "関数詳解"
.PP 
.SS "void connectMQTT ()"

.PP
MQTTブローカーへの接続を試行します。 接続が確立されていない場合にのみ再接続を試み、 成功時にはMQTTサブスクリプションを設定します。 
.SS "void handleMQTT ()"

.PP
MQTTクライアントのループ処理を実行します。 受信メッセージの処理や接続維持のために定期的に呼び出す必要があります。 
.SS "void handleReceivedMessage (const char * topic, const char * payload)"

.PP
受信したMQTTメッセージを処理します。 現在は 'smart_speaker/speak' トピックのメッセージを処理します。 
.PP
\fB引数\fP
.RS 4
\fItopic\fP 受信したメッセージのトピック。 
.br
\fIpayload\fP 受信したメッセージのペイロード。 
.RE
.PP

.SS "void publishMQTT (const String & topic, const String & payload)"

.PP
指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。 
.PP
\fB引数\fP
.RS 4
\fItopic\fP パブリッシュするMQTTトピック。 
.br
\fIpayload\fP パブリッシュするメッセージペイロード。 
.RE
.PP

.SS "void sendDeviceStatus ()"

.PP
デバイスのステータス情報をMQTTでパブリッシュします。 RSSI、稼働時間、ヒープメモリ情報などを含むJSON形式のペイロードを構築し、 MQTT_PUB_LOGトピックに送信します。 
.SH "変数詳解"
.PP 
.SS "WiFiClient espClient\fC [extern]\fP"

.SS "PubSubClient mqttClient\fC [extern]\fP"

.SH "著者"
.PP 
 esp32c3_libのソースコードから抽出しました。
