src ディレクトリリファレンス(3)               Library Functions Manual              src ディレクトリリファレンス(3)

NAME
       src ディレクトリリファレンス

SYNOPSIS
   ファイル
       ファイル boot_helper.cpp
       ファイル boot_helper.h
       ファイル log_helper.cpp
       ファイル log_helper.h
       ファイル mqtt_helper.cpp
       ファイル mqtt_helper.h
       ファイル ota_helper.h
       ファイル tone_helper.h
       ファイル wifi_helper.h

                                                    esp32c3_lib                     src ディレクトリリファレンス(3)
src/boot_helper.cpp(3)                        Library Functions Manual                       src/boot_helper.cpp(3)

NAME
       src/boot_helper.cpp

SYNOPSIS
       #include 'boot_helper.h'
       #include <settings.h>
       #include 'mqtt_helper.h'

   関数
       void publishBootStatus ()
           デバイスの起動ステータスをMQTTでパブリッシュします。

関数詳解
   void publishBootStatus ()
       デバイスの起動ステータスをMQTTでパブリッシュします。
       リセット理由、ファームウェアバージョン、コアID、ヒープ情報、フラッシュサイズなどを含む
       JSON形式のペイロードを構築し、MQTT_PUB_STATUSトピックに送信します。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                              src/boot_helper.cpp(3)
src/boot_helper.h(3)                          Library Functions Manual                         src/boot_helper.h(3)

NAME
       src/boot_helper.h

SYNOPSIS
       #include <Arduino.h>
       #include <esp_system.h>
       #include <ArduinoJson.h>
       #include 'log_helper.h'

   関数
       void publishBootStatus ()
           デバイスの起動ステータスをMQTTでパブリッシュします。

関数詳解
   void publishBootStatus ()
       デバイスの起動ステータスをMQTTでパブリッシュします。
       リセット理由、ファームウェアバージョン、コアID、ヒープ情報、フラッシュサイズなどを含む
       JSON形式のペイロードを構築し、MQTT_PUB_STATUSトピックに送信します。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                src/boot_helper.h(3)
src/log_helper.cpp(3)                         Library Functions Manual                        src/log_helper.cpp(3)

NAME
       src/log_helper.cpp

SYNOPSIS
       #include <Arduino.h>
       #include <ArduinoJson.h>
       #include <settings.h>
       #include 'log_helper.h'
       #include 'mqtt_helper.h'

   関数
       String getLogLevelString (LogLevel level)
           LogLevel列挙型に対応する文字列を返します。
       int getLogLevelInt (LogLevel level)
           LogLevel列挙型に対応する整数値を返します。
       void logMessage (LogLevel level, const String &message)
           指定されたログレベルとメッセージを処理します。

関数詳解
   int getLogLevelInt (LogLevel level)
       LogLevel列挙型に対応する整数値を返します。

       引数
           level ログレベル。

       戻り値
           ログレベルの整数表現。

   String getLogLevelString (LogLevel level)
       LogLevel列挙型に対応する文字列を返します。

       引数
           level ログレベル。

       戻り値
           ログレベルの文字列表現。

   void logMessage (LogLevel level, const String & message)
       指定されたログレベルとメッセージを処理します。 CURRENT_LOG_LEVELに基づいてメッセージをフィルタリングし、
       MQTTまたはシリアルポートに出力します。

       引数
           level ログレベル。
           message 出力するメッセージ。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                               src/log_helper.cpp(3)
src/log_helper.h(3)                           Library Functions Manual                          src/log_helper.h(3)

NAME
       src/log_helper.h

SYNOPSIS
       #include <Arduino.h>
       #include <settings.h>

   列挙型
       enum LogLevel { LOG_ERROR, LOG_WARN, LOG_INFO, LOG_DEBUG }

   関数
       String getLogLevelString (LogLevel level)
           LogLevel列挙型に対応する文字列を返します。
       int getLogLevelInt (LogLevel level)
           LogLevel列挙型に対応する整数値を返します。
       void logMessage (LogLevel level, const String &message)
           指定されたログレベルとメッセージを処理します。

列挙型詳解
   enum LogLevel
       列挙値

       LOG_ERROR

       LOG_WARN

       LOG_INFO

       LOG_DEBUG

関数詳解
   int getLogLevelInt (LogLevel level)
       LogLevel列挙型に対応する整数値を返します。

       引数
           level ログレベル。

       戻り値
           ログレベルの整数表現。

   String getLogLevelString (LogLevel level)
       LogLevel列挙型に対応する文字列を返します。

       引数
           level ログレベル。

       戻り値
           ログレベルの文字列表現。

   void logMessage (LogLevel level, const String & message)
       指定されたログレベルとメッセージを処理します。     CURRENT_LOG_LEVELに基づいてメッセージをフィルタリングし、
       MQTTまたはシリアルポートに出力します。

       引数
           level ログレベル。
           message 出力するメッセージ。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                 src/log_helper.h(3)
src/mqtt_helper.cpp(3)                        Library Functions Manual                       src/mqtt_helper.cpp(3)

NAME
       src/mqtt_helper.cpp

SYNOPSIS
       #include <WiFi.h>
       #include <PubSubClient.h>
       #include <ArduinoJson.h>
       #include <settings.h>
       #include 'log_helper.h'
       #include 'mqtt_helper.h'

   関数
       PubSubClient mqttClient (espClient)
       void connectMQTT ()
           MQTTブローカーへの接続を試行します。
       void publishMQTT (const String &topic, const String &payload)
           指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。
       void handleMQTT ()
           MQTTクライアントのループ処理を実行します。
       void handleReceivedMessage (const char *topic, const char *payload)
           受信したMQTTメッセージを処理します。
       void sendDeviceStatus ()
           デバイスのステータス情報をMQTTでパブリッシュします。

   変数
       WiFiClient espClient

関数詳解
   void connectMQTT ()
       MQTTブローカーへの接続を試行します。 接続が確立されていない場合にのみ再接続を試み、
       成功時にはMQTTサブスクリプションを設定します。

   void handleMQTT ()
       MQTTクライアントのループ処理を実行します。
       受信メッセージの処理や接続維持のために定期的に呼び出す必要があります。

   void handleReceivedMessage (const char * topic, const char * payload)
       受信したMQTTメッセージを処理します。 現在は 'smart_speaker/speak' トピックのメッセージを処理します。

       引数
           topic 受信したメッセージのトピック。
           payload 受信したメッセージのペイロード。

   PubSubClient mqttClient (espClient)
   void publishMQTT (const String & topic, const String & payload)
       指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。

       引数
           topic パブリッシュするMQTTトピック。
           payload パブリッシュするメッセージペイロード。

   void sendDeviceStatus ()
       デバイスのステータス情報をMQTTでパブリッシュします。
       RSSI、稼働時間、ヒープメモリ情報などを含むJSON形式のペイロードを構築し、 MQTT_PUB_LOGトピックに送信します。

変数詳解
   WiFiClient espClient
著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                              src/mqtt_helper.cpp(3)
src/mqtt_helper.h(3)                          Library Functions Manual                         src/mqtt_helper.h(3)

NAME
       src/mqtt_helper.h

SYNOPSIS
       #include <WiFi.h>
       #include <PubSubClient.h>
       #include <settings.h>
       #include 'log_helper.h'

   関数
       void connectMQTT ()
           MQTTブローカーへの接続を試行します。
       void publishMQTT (const String &topic, const String &payload)
           指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。
       void handleMQTT ()
           MQTTクライアントのループ処理を実行します。
       void handleReceivedMessage (const char *topic, const char *payload)
           受信したMQTTメッセージを処理します。
       void sendDeviceStatus ()
           デバイスのステータス情報をMQTTでパブリッシュします。

   変数
       WiFiClient espClient
       PubSubClient mqttClient

関数詳解
   void connectMQTT ()
       MQTTブローカーへの接続を試行します。 接続が確立されていない場合にのみ再接続を試み、
       成功時にはMQTTサブスクリプションを設定します。

   void handleMQTT ()
       MQTTクライアントのループ処理を実行します。
       受信メッセージの処理や接続維持のために定期的に呼び出す必要があります。

   void handleReceivedMessage (const char * topic, const char * payload)
       受信したMQTTメッセージを処理します。 現在は 'smart_speaker/speak' トピックのメッセージを処理します。

       引数
           topic 受信したメッセージのトピック。
           payload 受信したメッセージのペイロード。

   void publishMQTT (const String & topic, const String & payload)
       指定されたトピックとペイロードでMQTTメッセージをパブリッシュします。

       引数
           topic パブリッシュするMQTTトピック。
           payload パブリッシュするメッセージペイロード。

   void sendDeviceStatus ()
       デバイスのステータス情報をMQTTでパブリッシュします。
       RSSI、稼働時間、ヒープメモリ情報などを含むJSON形式のペイロードを構築し、 MQTT_PUB_LOGトピックに送信します。

変数詳解
   WiFiClient espClient [extern]
   PubSubClient mqttClient [extern]
著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                src/mqtt_helper.h(3)
src/ota_helper.h(3)                           Library Functions Manual                          src/ota_helper.h(3)

NAME
       src/ota_helper.h

SYNOPSIS
       #include <ArduinoOTA.h>
       #include 'log_helper.h'

   関数
       void setupOTA ()
           OTA (Over-The-Air) アップデート機能をセットアップします。
       void handleOTA ()
           OTAアップデートの処理を実行します。

関数詳解
   void handleOTA ()
       OTAアップデートの処理を実行します。 ArduinoOTAライブラリのハンドル関数を呼び出し、
       OTA通信を処理します。loop関数内で定期的に呼び出す必要があります。

   void setupOTA ()
       OTA (Over-The-Air) アップデート機能をセットアップします。
       ホスト名の設定、OTA開始/終了/進捗/エラー時のコールバック関数を登録し、 OTAサービスを開始します。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                 src/ota_helper.h(3)
src/tone_helper.h(3)                          Library Functions Manual                         src/tone_helper.h(3)

NAME
       src/tone_helper.h

SYNOPSIS
       #include <Arduino.h>
       #include <driver/ledc.h>

   マクロ定義
       #define BUZZER_PIN   4
       #define BZ_CHANNEL   LEDC_CHANNEL_0
       #define BZ_TIMER   LEDC_TIMER_0
       #define BZ_MODE   LEDC_LOW_SPEED_MODE
       #define BZ_RES   LEDC_TIMER_8_BIT

   関数
       void toneESP (uint32_t freq, uint32_t duration_ms)
           指定された周波数と期間でトーンを生成します。
       void beepOK ()
           成功を示す短いビープ音を鳴らします。
       void beepError ()
           エラーを示すビープ音を鳴らします。

マクロ定義詳解
   #define BUZZER_PIN   4
   #define BZ_CHANNEL   LEDC_CHANNEL_0
   #define BZ_MODE   LEDC_LOW_SPEED_MODE
   #define BZ_RES   LEDC_TIMER_8_BIT
   #define BZ_TIMER   LEDC_TIMER_0
関数詳解
   void beepError () [inline]
       エラーを示すビープ音を鳴らします。

   void beepOK () [inline]
       成功を示す短いビープ音を鳴らします。

   void toneESP (uint32_t freq, uint32_t duration_ms)
       指定された周波数と期間でトーンを生成します。
       LEDCタイマーとチャンネルを設定し、指定された周波数でデューティサイクル50のPWM信号を出力します。

       引数
           freq トーンの周波数（Hz）。
           duration_ms トーンを鳴らす期間（ミリ秒）。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                src/tone_helper.h(3)
src/wifi_helper.h(3)                          Library Functions Manual                         src/wifi_helper.h(3)

NAME
       src/wifi_helper.h

SYNOPSIS
       #include <WiFi.h>
       #include <settings.h>
       #include 'log_helper.h'

   関数
       void maintainWiFiConnection ()
           WiFi接続を維持します。

関数詳解
   void maintainWiFiConnection ()
       WiFi接続を維持します。
       WiFiが未接続の場合、再接続を試行します。接続成功時にはIPアドレス、SSID、MACアドレスをログに出力します。
       接続に失敗した場合でも、ループを維持し再起動は行いません。

著者
        esp32c3_libのソースコードから抽出しました。

                                                    esp32c3_lib                                src/wifi_helper.h(3)
